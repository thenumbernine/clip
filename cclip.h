#pragma once

#include <stddef.h>	//size_t

// this should be generated by make/cmake and outputted somewhere to a -config.h or something right?
#define CLIP_ENABLE_IMAGE 1
//#define CLIP_ENALBE_LIST_FORMATS

#if defined _WIN32 || defined __CYGWIN__
#ifdef CIMGUI_NO_EXPORT
#define API
#else
#define API __declspec(dllexport)
#endif
#else
#ifdef __GNUC__
#define API  __attribute__((__visibility__("default")))
#else
#define API
#endif
#endif

#if defined __cplusplus
#define EXTERN extern "C"
#else
#define EXTERN extern
#endif

#define CCLIP_API EXTERN API

typedef size_t ClipFormat;

typedef void ClipLock;
typedef void ClipImage;

typedef struct ClipImageSpec {
	unsigned long width;
	unsigned long height;
	unsigned long bits_per_pixel;
	unsigned long bytes_per_row;
	unsigned long red_mask;
	unsigned long green_mask;
	unsigned long blue_mask;
	unsigned long alpha_mask;
	unsigned long red_shift;
	unsigned long green_shift;
	unsigned long blue_shift;
	unsigned long alpha_shift;
} ClipImageSpec;

CCLIP_API ClipLock * clip_lock_new();
CCLIP_API ClipLock * clip_lock_new_p(void * native_window_handle);
CCLIP_API void clip_lock_free(ClipLock * lock);
CCLIP_API bool clip_lock_locked(ClipLock const * lock);
CCLIP_API bool clip_lock_clear(ClipLock * lock);
CCLIP_API bool clip_lock_is_convertible(ClipLock const * lock, ClipFormat f);
CCLIP_API bool clip_lock_set_data(ClipLock * lock, ClipFormat f, char const * buf, size_t len);
CCLIP_API bool clip_lock_get_data(ClipLock const * lock, ClipFormat f, char * buf, size_t len);
CCLIP_API size_t clip_lock_get_data_length(ClipLock const * lock, ClipFormat f);
#if CLIP_ENABLE_IMAGE
CCLIP_API bool clip_lock_set_image(ClipLock * lock, ClipImage const * image);
CCLIP_API bool clip_lock_get_image(ClipLock const * lock, ClipImage * image);
CCLIP_API bool clip_lock_get_image_spec(ClipLock const * lock, ClipImageSpec * spec);
#endif

CCLIP_API ClipFormat clip_register_format(char const * name, size_t len);
CCLIP_API ClipFormat clip_empty_format();
CCLIP_API ClipFormat clip_text_format();

#if CLIP_ENABLE_IMAGE
CCLIP_API ClipFormat clip_image_format();
#endif

CCLIP_API bool clip_has(ClipFormat f);
CCLIP_API bool clip_clear();

typedef enum {
	Clip_CannotLock,
#if CLIP_ENABLE_IMAGE
	Clip_ImageNotSupported,
#endif
} Clip_ErrorCode;

typedef void (*ClipErrorHandler)(Clip_ErrorCode code);
CCLIP_API void clip_set_error_handler(ClipErrorHandler f);
CCLIP_API ClipErrorHandler clip_get_error_handler();
CCLIP_API bool clip_set_text(char const * value, size_t len) ;
CCLIP_API bool clip_get_text(char * valuecptr, size_t * len);

#if CLIP_ENABLE_IMAGE
CCLIP_API ClipImage * clip_image_new();
CCLIP_API ClipImage * clip_image_new_p(ClipImageSpec const * spec);
CCLIP_API ClipImage * clip_image_new_pp(void const * data, ClipImageSpec const * spec);
CCLIP_API ClipImage * clip_image_new_fromImage(ClipImage const * image);
CCLIP_API void clip_image_free(ClipImage * image);
CCLIP_API char * clip_image_data(ClipImage const * image);
CCLIP_API ClipImageSpec const * clip_image_spec(ClipImage const * image);
CCLIP_API bool clip_image_is_valid(ClipImage const * image);
CCLIP_API void clip_image_reset(ClipImage * image);
CCLIP_API bool clip_set_image(ClipImage const * image);
CCLIP_API bool clip_get_image(ClipImage * image);
CCLIP_API bool clip_get_image_spec(ClipImageSpec * spec);
#endif

CCLIP_API void clip_set_x11_wait_timeout(int msecs);
CCLIP_API int clip_get_x11_wait_timeout();